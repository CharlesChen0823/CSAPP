# Execution begins at address 0
        .pos 0
        irmovq stack, %rsp      # Set up stack pointer
        call main		# Execute main program
        halt			# Terminate program

        .align 8
# Source block
src:
        .quad 0x00a
        .quad 0x0b0
        .quad 0xc00
# Destination block
dest:
        .quad 0x111
        .quad 0x222
        .quad 0x333

main:
        irmovq src, %rdi
        irmovq dest, %rsi
        irmovq $3, %rdx
        call copy_block         # copy_block(src, dest, 3)
        ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy_block:
        irmovq $1, %r8          # constant 1
        irmovq $8, %r9          # constant 8
        xorq %rax, %rax         # result = 0
        andq %rdx, %rdx         # Test len
        jmp test                # Goto test
loop:
        mrmovq (%rdi), %r10     # val = *src
        addq %r9, %rdi          # src++
        rmmovq %r10, (%rsi)     # *dest = val
        addq %r9, %rsi          # dest++
        xorq %r10, %rax         # result ^= val
        subq %r8, %rdx          # len--, Set CC
test:
        jg loop                 # if > 0, goto loop
        ret                     # Return

# Stack starts here and grows to lower addresses
        .pos 0x200
stack:
