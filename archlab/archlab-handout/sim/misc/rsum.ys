# Execution begins at address 0
        .pos 0
        irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
        .align 8
ele1:
        .quad 0x00a
        .quad ele2
ele2:
        .quad 0x0b0
        .quad ele3
ele3:
        .quad 0xc00
        .quad 0

main:
        irmovq ele1, %rdi
        call rsum_list           # rsum_list(ele1)
        ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
        xorq %rax, %rax         # val = 0
        andq %rdi, %rdi         # Test ls
        jne else                # If != 0, goto else
        ret
else:
        mrmovq (%rdi), %rsi     # val = ls->val
        pushq %rsi              # Save val
        mrmovq 8(%rdi), %rdi
        call rsum_list          # rest = rsum_list(ls->next)
        popq %rsi               # Restore val
        addq %rsi, %rax         # val += rest
        ret                     # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
